import { Box, Link, Table, Tbody, Td, Text, Th, Thead, Tr } from "@chakra-ui/react";
import { useCallback, useEffect, useRef, useState } from "react";
import { useParams } from "react-router-dom";

import { FormateurEmail } from "../../../common/components/admin/fields/FormateurEmail";
import { RelationStatut } from "../../../common/components/admin/fields/RelationStatut";
import { Breadcrumb } from "../../../common/components/Breadcrumb";
import { FormateurLibelle } from "../../../common/components/formateur/fields/FormateurLibelle";
import { Page } from "../../../common/components/layout/Page";
import { ResponsableLibelle } from "../../../common/components/responsable/fields/ResponsableLibelle";
import { OrganismeFormateurTag } from "../../../common/components/tags/OrganismeFormateur";
import { OrganismeResponsableFormateurTag } from "../../../common/components/tags/OrganismeResponsableFormateur";
import { _get } from "../../../common/httpClient";

export const Formateurs = () => {
  const mounted = useRef(false);
  const { siret_responsable } = useParams();

  const [responsable, setResponsable] = useState(undefined);

  const getResponsable = useCallback(async () => {
    try {
      const response = await _get(`/api/admin/responsables/${siret_responsable}`);
      setResponsable(response);
    } catch (error) {
      setResponsable(undefined);
      throw Error;
    }
  }, [siret_responsable]);

  const reload = useCallback(async () => {
    await Promise.all([await getResponsable()]);
  }, [getResponsable]);

  useEffect(() => {
    const run = async () => {
      if (!mounted.current) {
        await reload();
        mounted.current = true;
      }
    };
    run();

    return () => {
      mounted.current = false;
    };
  }, [reload]);

  if (!responsable) {
    return (
      <>
        Un problème est survenu lors de la récupération du responsable.{" "}
        <Link variant="action" href="/support">
          Signaler un problème
        </Link>
      </>
    );
  }

  const title = (
    <>
      Organisme responsable :&nbsp;
      <ResponsableLibelle responsable={responsable} /> / liste des organismes formateurs associés
    </>
  );

  const relationsResponsable = responsable.relations.filter(
    (relation) => relation.responsable?.siret === responsable.siret
  );

  return (
    <>
      <Breadcrumb
        items={[
          {
            label: (
              <>
                Organisme responsable :&nbsp;
                <ResponsableLibelle responsable={responsable} />
              </>
            ),
            url: `/admin/responsable/${siret_responsable}`,
          },

          {
            label: <>Liste des organismes formateurs associés</>,
            url: `/admin/responsable/${siret_responsable}/formateurs`,
          },
        ]}
      />

      <Page title={title}>
        <Box mb={12}>
          <Text mb={4}>
            <strong>
              Voici la listes des organismes formateurs pour lesquels l'organisme a été identifié comme responsable.
            </strong>
          </Text>
        </Box>

        <Box mb={12}>
          {!!relationsResponsable.length && (
            <Table mt={12}>
              <Thead>
                <Tr>
                  <Th width="80px"></Th>

                  <Th width="450px">Raison sociale / Ville</Th>
                  <Th width="350px">Courriel habilité</Th>

                  <Th width={"70px"}>Candidats</Th>
                  <Th width={"70px"}>Restant à télécharger</Th>
                  <Th>Statut</Th>
                </Tr>
              </Thead>
              <Tbody>
                {relationsResponsable.map((relation) => {
                  const formateur = relation?.formateur ?? relation.etablissement_formateur;
                  const delegue = relation?.delegue;

                  return (
                    <Tr key={formateur?.siret}>
                      <Td>
                        {relation?.formateur && (
                          <Link
                            variant="primary"
                            href={`/admin/responsable/${responsable?.siret}/formateur/${formateur?.siret}`}
                          >
                            Détail
                          </Link>
                        )}
                      </Td>
                      <Td>
                        <Text lineHeight={6}>
                          <FormateurLibelle formateur={formateur} />
                          {formateur.siret === responsable.siret ? (
                            <OrganismeResponsableFormateurTag ml={2} verticalAlign="baseline" />
                          ) : (
                            <OrganismeFormateurTag ml={2} verticalAlign="baseline" />
                          )}
                        </Text>
                      </Td>
                      <Td>
                        <Text lineHeight={6}>
                          <FormateurEmail
                            responsable={responsable}
                            formateur={formateur}
                            delegue={delegue}
                            callback={reload}
                          />
                        </Text>
                      </Td>
                      <Td>
                        <Text>{relation?.nombre_voeux.toLocaleString()}</Text>
                      </Td>
                      <Td>
                        <Text>{relation?.nombre_voeux_restant.toLocaleString()}</Text>
                      </Td>
                      <Td>
                        <Text lineHeight={6}>
                          <RelationStatut relation={relation} />
                        </Text>
                      </Td>
                    </Tr>
                  );
                })}
              </Tbody>
            </Table>
          )}
        </Box>

        <Box mb={12}>
          <Link href="/support" variant="action">
            Signaler une anomalie
          </Link>
        </Box>
      </Page>
    </>
  );
};

export default Formateurs;
